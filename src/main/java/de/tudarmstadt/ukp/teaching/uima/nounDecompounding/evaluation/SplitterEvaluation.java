/**
 * Copyright (c) 2010 Jens Haase <je.haase@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package de.tudarmstadt.ukp.teaching.uima.nounDecompounding.evaluation;

import java.io.IOException;
import java.util.List;

import de.tudarmstadt.ukp.teaching.uima.nounDecompounding.splitter.ISplitAlgorithm;
import de.tudarmstadt.ukp.teaching.uima.nounDecompounding.splitter.Split;

/**
 * Evaluates the splitting results with the ccorpus of Marek
 * (http://shlomme.diotavelli.net/studies/)
 * 
 * The corpus contains more than 150,000 semi automated created words
 * 
 * This evaluation will test if correct split from the corpus is in
 * the list of possible splittes generated by the split algorithm.
 * 
 * @author Jens Haase <je.haase@googlemail.com>
 */
public class SplitterEvaluation {

	private CcorpusReader reader;

	public SplitterEvaluation(CcorpusReader aReader) {
		this.reader = aReader;
	}
	
	/**
	 * Evaluates for a given algorithm.
	 * 
	 * Returns the recall: Number of correct / Number of total
	 * 
	 * @param algo
	 * @param limit If you only want to test on a small subset. Set 0 to test all.
	 */
	public float evaluate(ISplitAlgorithm algo, int limit) {
		try {
			String line;
			String[] data;
			Split split;
			List<Split> algoSplits;
			
			int total = 0, correct = 0, correctWithoutMorpheme = 0;
			
			while ((split = reader.readSplit()) != null) {
				algoSplits = algo.split(split.getWord()).getAllSplits();
				
				// Try to find with morphemes
				boolean found = false;
				for (Split s : algoSplits) {
					if (split.equals(s)) {
						// We found a match. Increment correct and break loop
						correct++;
						found = true;
						break;
					}
				}
				
				// Try to find without morphemes
				boolean foundWithoutMorpheme = false;
				for (Split s : algoSplits) {
					if (split.equalWithoutMorpheme(s)) {
						correctWithoutMorpheme++;
						foundWithoutMorpheme = true;
						break;
					}
				}
				
				// Print errors for wrong
				if (!found) System.err.println("Not found "+ ((foundWithoutMorpheme) ? "(but without morpheme)" : "") +": " + split.getWord() + "\t Correct one is: " + split.toString() + "\t Yours: " + algoSplits);
				
				// Increment total numbers
				total++;
				
				if (limit > 0 && total > limit) {
					break;
				}
			}
			
			System.out.println("Correct without morphemes: " + ((float) correctWithoutMorpheme / (float) total));
			
			// Return result
			return (float) correct / (float) total;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return Float.NaN;
	}
	
	/**
	 * Evaluates for a given algorithm.
	 * 
	 * Returns the recall: Number of correct / Number of total
	 * 
	 * @param algo
	 */
	public float evaluate(ISplitAlgorithm algo) {
		return this.evaluate(algo, 0);
	}
}
